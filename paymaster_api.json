{
    "openrpc": "1.0.0-rc1",
    "info": {
        "version": "0.0.1-rc1",
        "title": "Applicative Paymaster API",
        "license": {}
    },
    "servers": [],
    "methods": [
        {
            "name": "paymaster_getStatus",
            "summary": "Returns the status of the paymaster service",
            "params": [],
            "result": {
                "name": "result",
                "description": "If the paymaster service is correctly functioning, return true. Else, return false",
                "required": true,
                "schema": {
                    "type": "boolean"
                }
            }
        },
        {
            "name": "paymaster_isCompatible",
            "summary": "Given an account address, returns the highest compatible version of SNIP-9 that the account implements",
            "params": [
                {
                    "name": "sender_address",
                    "description": "The address of the account that wishes to use the paymaster service",
                    "required": true,
                    "schema": {
                        "title": "Address",
                        "$ref": "#/components/schemas/ADDRESS"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "If the address is compatible with some version of outside execution, return the highest compatible version. Else, return zero",
                "required": true,
                "schema": {
                    "title": "Highest compatible version of outside execution, or zero if not supported",
                    "$ref": "#/components/schemas/NUMERIC"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_SENDER_ADDRESS"
                }
            ]
        },
        {
            "name": "paymaster_buildTypedData",
            "summary": "Receives the array of calls that the user wishes to make, along with token data and resource bounds. Returns a typed object for the user to sign",
            "params": [
                {
                    "name": "sender_address",
                    "description": "The address of the account that wishes to use the paymaster service",
                    "required": true,
                    "schema": {
                        "title": "Address",
                        "$ref": "#/components/schemas/ADDRESS"
                    }
                },
                {
                    "name": "calls",
                    "description": "The sequence of calls that the user wishes to perform",
                    "required": true,
                    "schema": {
                        "title": "Calls",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CALL"
                        }
                    }
                },
                {
                    "name": "gas_token_address",
                    "description": "The address of the token contract that the user wishes use to pay fees",
                    "required": true,
                    "schema": {
                        "title": "Gas token",
                        "$ref": "#/components/schemas/ADDRESS"
                    }
                },
                {
                    "name": "max_token_amount",
                    "description": "The maximum amount of gas token (denominated in its smallest unit) that the user allows for fee payment",
                    "required": true,
                    "schema": {
                        "title": "Amount",
                        "$ref": "#/components/schemas/u256"
                    }
                },
                {
                    "name": "version",
                    "description": "The version of the outside execution revision (SNIP-9) that is being used",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/NUMERIC"
                    }
                }
            ],
            "result": {
                "name": "result",
                "description": "The typed data which was requested. The version in the `domain` property corresponds to the `version` in the request",
                "required": true,
                "schema": {
                    "title": "Typed data",
                    "$ref": "#/components/schemas/OUTSIDE_EXECUTION_TYPED_DATA"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_SENDER_ADDRESS"
                },
                {
                    "$ref": "#/components/errors/INVALID_TOKEN_ADDRESS"
                },
                {
                    "$ref": "#/components/errors/INVALID_REQUEST_PAYLOAD"
                },
                {
                    "$ref": "#/components/errors/MAX_AMOUNT_TOO_LOW"
                },
                {
                    "$ref": "#/components/errors/UNKNOWN_ERROR"
                }
            ]
        },
        {
            "name": "paymaster_execute",
            "summary": "Sends the signed typed data to the paymaster service for execution",
            "params": [
                {
                    "name": "sender_address",
                    "description": "The address of the account that wishes to use the paymaster service",
                    "required": true,
                    "schema": {
                        "title": "Address",
                        "$ref": "#/components/schemas/ADDRESS"
                    }
                },
                {
                    "name": "typed_data",
                    "description": "The typed data that was returned by the `paymaster_buildTypedData` endpoint and signed upon by the user",
                    "required": true,
                    "schema": {
                        "title": "Typed data",
                        "$ref": "#/components/schemas/OUTSIDE_EXECUTION_TYPED_DATA"
                    }
                },
                {
                    "name": "signature",
                    "description": "The signature of the user on the typed data",
                    "required": true,
                    "schema": {
                        "title": "Signature",
                        "$ref": "#/components/schemas/SIGNATURE"
                    }
                }
            ],
            "result": {
                "name": "transaction_hash",
                "description": "The hash of the requested transaction",
                "required": true,
                "schema": {
                    "title": "Transaction hash",
                    "$ref": "#/components/schemas/TXN_HASH"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/INVALID_SENDER_ADDRESS"
                },
                {
                    "$ref": "#/components/errors/INVALID_REQUEST_PAYLOAD"
                },
                {
                    "$ref": "#/components/errors/INVALID_SIGNATURE"
                },
                {
                    "$ref": "#/components/errors/UNKNOWN_ERROR"
                }
            ]
        },
        {
            "name": "paymaster_getSupportedTokensAndPrices",
            "summary": "Get a list of the tokens that the paymaster supports, together with their prices in STRK",
            "params": [],
            "result": {
                "name": "result",
                "summary": "An array of token data",
                "required": true,
                "schema": {
                    "type": "array",
                    "title": "List of tokens",
                    "items": {
                        "$ref": "#/components/schemas/TOKEN_DATA"
                    }
                }
            }
        }
    ],
    "components": {
        "contentDescriptors": {},
        "schemas": {
            "ADDRESS": {
                "title": "Address",
                "description": "A contract address on Starknet",
                "$ref": "#/components/schemas/FELT"
            },
            "FELT": {
                "title": "Field element",
                "description": "A field element. represented by a hex string of length at most 63",
                "type": "string",
                "pattern": "^0x(0|[a-fA-F1-9]{1}[a-fA-F0-9]{0,62})$"
            },
            "u256": {
                "title": "u256",
                "description": "256 bit unsigned integers, represented by a hex string of length at most 64",
                "type": "string",
                "pattern": "^0x(0|[a-fA-F1-9]{1}[a-fA-F0-9]{0,63})$"
            },
            "NUMERIC": {
                "title": "Numeric string",
                "description": "A string representing an unsigned integer",
                "type": "string",
                "pattern": "^(0|[1-9]{1}[0-9]*)$"
            },
            "CALL": {
                "title": "Call",
                "description": "The object that defines an invocation of a function in a contract",
                "type": "object",
                "properties": {
                    "to": {
                        "title": "Contract address",
                        "$ref": "#/components/schemas/ADDRESS"
                    },
                    "selector": {
                        "title": "Entry point selector",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "calldata": {
                        "type": "array",
                        "title": "Calldata",
                        "description": "Inputs for the entry point function",
                        "items": {
                            "$ref": "#/components/schemas/FELT"
                        }
                    }
                }
            },
            "TXN_HASH": {
                "$ref": "#/components/schemas/FELT",
                "description": "The transaction hash",
                "title": "Transaction hash"
            },
            "OUTSIDE_EXECUTION_TYPED_DATA": {
                "title": "Typed data for outside execution",
                "description": "A typed data object (in the sense of SNIP-12) which represents an outside execution payload, according to SNIP-9",
                "oneOf": [
                    {
                        "title": "Typed data V1",
                        "$ref": "#/components/schemas/OUTSIDE_EXECUTION_TYPED_DATA_V1"
                    },
                    {
                        "title": "Typed data V2",
                        "$ref": "#/components/schemas/OUTSIDE_EXECUTION_TYPED_DATA_V2"
                    },
                    {
                        "title": "Typed data V3",
                        "$ref": "#/components/schemas/OUTSIDE_EXECUTION_TYPED_DATA_V3"
                    }
                ]
            },
            "OUTSIDE_EXECUTION_TYPED_DATA_V1": {
                "type": "object",
                "properties": {
                    "types": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/STARKNET_TYPE"
                            }
                        }
                    },
                    "primaryType": {
                        "type": "string"
                    },
                    "domain": {
                        "$ref": "#/components/schemas/STARKNET_DOMAIN"
                    },
                    "message": {
                        "$ref": "#/components/schemas/OUTSIDE_EXECUTION_MESSAGE_V1"
                    }
                },
                "required": [
                    "types",
                    "primaryType",
                    "domain",
                    "message"
                ]
            },
            "OUTSIDE_EXECUTION_TYPED_DATA_V2": {
                "type": "object",
                "properties": {
                    "types": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/STARKNET_TYPE"
                            }
                        }
                    },
                    "primaryType": {
                        "type": "string"
                    },
                    "domain": {
                        "$ref": "#/components/schemas/STARKNET_DOMAIN"
                    },
                    "message": {
                        "$ref": "#/components/schemas/OUTSIDE_EXECUTION_MESSAGE_V2"
                    }
                },
                "required": [
                    "types",
                    "primaryType",
                    "domain",
                    "message"
                ]
            },
            "OUTSIDE_EXECUTION_TYPED_DATA_V3": {},

            "STARKNET_MERKLE_TYPE": {
                "title": "Starknet Merkle Type",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "merkletree"
                        ]
                    },
                    "contains": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "contains"
                ]
            },
            "STARKNET_ENUM_TYPE": {
                "title": "Starknet Enum Type",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "enum"
                        ]
                    },
                    "contains": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "contains"
                ]
            },
            "SIGNATURE": {
                "title": "Signature",
                "description": "A transaction signature",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/FELT"
                }
            },
            "TOKEN_DATA": {
                "title": "Token data",
                "description": "Object containing data about the token: contract address, number of decimals and current price in STRK",
                "type": "object",
                "properties": {
                    "token_address": {
                        "title": "Token contract address",
                        "$ref": "#/components/schemas/ADDRESS"
                    },
                    "decimals": {
                        "title": "The number of decimals of the token",
                        "type": "number"
                    },
                    "price_in_strk": {
                        "title": "Price in STRK (in FRI units)",
                        "$ref": "#/components/schemas/u256"
                    }
                },
                "required": [
                    "token_address",
                    "decimals",
                    "price_in_strk"
                ]
            },
            "STARKNET_DOMAIN": {
                "title": "Starknet Domain",
                "type": "object",
                "minProperties": 1,
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "chainId": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "number"
                            }
                        ]
                    },
                    "revision": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "2"
                                ]
                            },
                            {
                                "type": "number",
                                "enum": [
                                    0,
                                    1
                                ]
                            }
                        ]
                    }
                }
            },
            "STARKNET_TYPE": {
                "title": "Starknet Type",
                "description": "A single type, as part of a struct. The `type` field can be any of the EIP-712 supported types",
                "anyOf": [
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "type"
                        ]
                    },
                    {
                        "$ref": "#/components/schemas/STARKNET_MERKLE_TYPE"
                    },
                    {
                        "$ref": "#/components/schemas/STARKNET_ENUM_TYPE"
                    }
                ]
            },
            "OUTSIDE_EXECUTION_MESSAGE_V1": {
                "name": "message",
                "type": "object",
                "properties": {
                    "caller": {
                        "title": "Caller address",
                        "description": "The account address of the user",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "nonce": {
                        "title": "Nonce",
                        "description": "The nonce used in the outside execution protocol",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "execute_after": {
                        "title": "Minimum timestamp",
                        "description": "Timestamp after which the outside execution is valid and possible",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "execute_before": {
                        "title": "Maximum timestamp",
                        "description": "Timestamp before which the outside execution is valid and possible",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "calls_len": {
                        "title": "Calls length",
                        "description": "Length of the array of calls returned by the paymaster service",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "calls": {
                        "title": "Calls",
                        "description": "The array of calls returned by the paymaster service",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OUTSIDE_CALL_V1"
                        }
                    }
                },
                "required": [
                    "caller",
                    "nonce",
                    "execute_after",
                    "execute_before",
                    "calls_len",
                    "calls"
                ]
            },
            "OUTSIDE_EXECUTION_MESSAGE_V2": {
                "name": "message",
                "type": "object",
                "properties": {
                    "Caller": {
                        "title": "Caller address",
                        "description": "The account address of the user",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "Nonce": {
                        "title": "Nonce",
                        "description": "The nonce used in the outside execution protocol",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "Execute After": {
                        "title": "Minimum timestamp",
                        "description": "Timestamp after which the outside execution is valid and possible",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "Execute Before": {
                        "title": "Maximum timestamp",
                        "description": "Timestamp before which the outside execution is valid and possible",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "Calls": {
                        "title": "Calls",
                        "description": "The array of calls returned by the paymaster service",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OUTSIDE_CALL_V2"
                        }
                    }
                },
                "required": [
                    "Caller",
                    "Nonce",
                    "Execute After",
                    "Execute Before",
                    "Calls"
                ]
            },
            "OUTSIDE_EXECUTION_MESSAGE_V3": {},
            "OUTSIDE_CALL_V1": {
                "title": "Call",
                "description": "The object that defines an invocation of a function in a contract",
                "type": "object",
                "properties": {
                    "to": {
                        "title": "Contract address",
                        "$ref": "#/components/schemas/ADDRESS"
                    },
                    "selector": {
                        "title": "Entry point selector",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "calldata_len": {
                        "title": "Entry point selector",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "calldata": {
                        "type": "array",
                        "title": "Calldata",
                        "description": "Inputs for the entry point function",
                        "items": {
                            "$ref": "#/components/schemas/FELT"
                        }
                    }
                },
                "required": [
                    "To",
                    "Selector",
                    "Calldata"
                ]
            },
            "OUTSIDE_CALL_V2": {
                "title": "Call",
                "description": "The object that defines an invocation of a function in a contract",
                "type": "object",
                "properties": {
                    "To": {
                        "title": "Contract address",
                        "$ref": "#/components/schemas/ADDRESS"
                    },
                    "Selector": {
                        "title": "Entry point selector",
                        "$ref": "#/components/schemas/FELT"
                    },
                    "Calldata": {
                        "type": "array",
                        "title": "Calldata",
                        "description": "Inputs for the entry point function",
                        "items": {
                            "$ref": "#/components/schemas/FELT"
                        }
                    }
                },
                "required": [
                    "To",
                    "Selector",
                    "Calldata"
                ]
            }
        },
        "errors": {
            "INVALID_SENDER_ADDRESS": {
                "code": 111,
                "message": "An error occurred (INVALID_SENDER_ADDRESS)"
            },
            "INVALID_TOKEN_ADDRESS": {
                "code": 112,
                "message": "An error occurred (INVALID_TOKEN_ADDRESS)"
            },
            "INVALID_REQUEST_PAYLOAD": {
                "code": 113,
                "message": "An error occurred (INVALID_REQUEST_PAYLOAD)"
            },
            "INVALID_SIGNATURE": {
                "code": 114,
                "message": "An error occurred (INVALID_SIGNATURE)"
            },
            "MAX_AMOUNT_TOO_LOW": {
                "code": 115,
                "message": "An error occurred (MAX_AMOUNT_TOO_LOW)"
            },
            "UNKNOWN_ERROR": {
                "code": 163,
                "message": "An error occurred (UNKNOWN_ERROR)",
                "data": "string"
            }
        }
    }
}